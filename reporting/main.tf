# S3 bucket to store CUR reports generated by AWS so OCTO can ingest them
resource "aws_s3_bucket" "octo_reports" {
  bucket              = var.alphaus_bucket_name
  object_lock_enabled = true
}

# Reports sent to S3 should not be writeable after they're written but we want to allow
# many reads so we'll enable object lock on the bucket
resource "aws_s3_bucket_object_lock_configuration" "octo_reports_lock" {
  bucket = aws_s3_bucket.octo_reports.id
  rule {
    default_retention {
      mode  = "COMPLIANCE"
      years = 5
    }
  }
}

# The actual CUR report to be generated and stored in S3
resource "aws_cur_report_definition" "hourly_report" {
  report_name                = var.alphaus_hourly_report_name
  time_unit                  = "HOURLY"
  format                     = "textORcsv"
  compression                = "GZIP"
  additional_schema_elements = var.split_cost_allocation_data ? ["RESOURCES", "SPLIT_COST_ALLOCATION_DATA"] : ["RESOURCES"]
  s3_bucket                  = aws_s3_bucket.octo_reports.id
  s3_prefix                  = var.alphaus_hourly_report_prefix
  s3_region                  = aws_s3_bucket.octo_reports.region
  additional_artifacts       = [] # Required, but must be empty as it causes trouble for OCTO
  report_versioning          = "CREATE_NEW_REPORT"
}

# The policy document that we'll use to grant Alphaus access to the CUR report S3 buckets
data "aws_iam_policy_document" "alphaus_reports_access_policy" {
  statement {
    sid     = "AllowS3Access"
    actions = ["s3:Get*", "s3:List*"]
    principals {
      type        = "AWS"
      identifiers = [var.alphaus_principal]
    }
    resources = [
      aws_s3_bucket.octo_reports.arn,
      "${aws_s3_bucket.octo_reports.id}/*"
    ]
  }
}

# A role to allow OCTO access to the S3 bucket
resource "aws_iam_role" "alphaus_reports_access_role" {
  name               = "allow_octo_reports_access"
  assume_role_policy = data.aws_iam_policy_document.alphaus_reports_access_policy.json
}
